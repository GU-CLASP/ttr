\(params : [ Ind : Type
           ; user0 : Ind
           ; agent : Ind
           ; greet : Ind -> Ind -> Type
	   ; sg    : (s:Ind) -> (a:Ind) -> greet s a
	   ; sg'   : greet agent user0
	   ; emptyMove : [ spkr    : Ind
	     	         ; addr    : Ind
			 ; content : [] ]
           ; ]) -> module

open import Lists	
open import Kos params
open params

countergreeting : InformationState /\ [ dgb : [ moves      : List Move
                          ; latestMove : [ spkr    : Ind
			    	       	 ; addr    : Ind (= agent)
			    	       	 ; content : [c : greet spkr addr]]]]
                  -> InformationState
countergreeting r = ( private = ( agenda = (head = ( spkr = agent
                                                   , addr = user0
                                                   , content = (c = sg')),
                                            tail = r.private.agenda ))
                    , dgb = r.dgb )

greeting' : InformationState -> InformationState
greeting' s = ( private = s.private
	       , dgb     = ( moves  = s.dgb.moves
	       	 	   , latestMove = (spkr = user0, addr = agent,
			     		  content = (c = sg user0 agent))))

initialize : [] -> InformationState
initialize _ = ( private = ( agenda = 'nil ())
	       , dgb     = ( moves  = 'nil ()
	       	 	   , latestMove = emptyMove))
