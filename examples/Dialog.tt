\(params : [ Ind : Type
           ; user0 : Ind
           ; agent : Ind
           ; greet : Ind -> Ind -> Type
	   ; sg    : (s:Ind) -> (a:Ind) -> greet s a
	   ; sg'   : greet agent user0
	   ; emptyMove : [ spkr    : Ind
	     	         ; addr    : Ind
			 ; content : [] ]
           ; ]) -> module

open import Lists
open import Kos params
open import Maybe

open params

GreetingMoveContent : Ind -> Ind -> Type
GreetingMoveContent spkr addr =  [c : greet spkr addr]

greetingMove : [ spkr    : Ind ; addr : Ind (= agent) ; content : GreetingMoveContent spkr addr ]
greetingMove = (spkr = user0, addr = agent, content = (c = sg user0 agent))

integrateUserMove : (c : Type)
                -> [ spkr    : Ind ; addr : Ind ; content : c]
                -> InformationState
                -> InformationState /\ [ dgb : [ latestMove : [ spkr : Ind ; addr    : Ind ; content : c]]]
integrateUserMove _ m s = (private = s.private, dgb = (latestMove = m, moves = cons Move m s.dgb.moves))

greet' : InformationState -> InformationState/\ [ dgb : [ latestMove : [ spkr : Ind ; addr    : Ind ; content : [c : greet spkr addr]]]]
greet' = integrateUserMove (GreetingMoveContent user0 agent) greetingMove

ruleSet :
  [fulfilAgenda : InformationState /\ [ private : [ agenda : ReadyAgenda]] -> InformationState
  ;countergreeting : InformationState /\ [ dgb : [ latestMove : [ spkr    : Ind
                                                              ; addr    : Ind (= agent)
                                                              ; content : [c : greet spkr addr]]]]
                    -> (InformationState /\ [ private : [ agenda : ReadyAgenda ]])
  ;greeting' : InformationState  -> InformationState /\ [ dgb : [ latestMove : [ spkr    : Ind
                                                               ; addr    : Ind (= agent)
                                                               ; content : [c : greet spkr addr]]]]
  ;initialize : [] -> InformationState]

ruleSet = 
 (fulfilAgenda = \s -> ( private = (agenda = emptyAgenda)
                       , dgb     = (moves = cons Move (head Move s.private.agenda) s.dgb.moves
                                   , latestMove = (head Move s.private.agenda)))

 ,countergreeting = \r -> ( private = ( agenda = consAgenda ( spkr = agent
                                                        , addr = user0
                                                        , content = (c = sg'))
                                                        r.private.agenda)
                      , dgb = r.dgb )

 ,greeting' = \s -> ( private = s.private
                 , dgb     = ( moves  = s.dgb.moves
                             , latestMove = (spkr = user0, addr = agent,
                                            content = (c = sg user0 agent))))

 ,initialize = \ _ -> ( private = ( agenda = emptyAgenda)
                 , dgb     = ( moves  = emptyList Move
                             , latestMove = emptyMove)))
