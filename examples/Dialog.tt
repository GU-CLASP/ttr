let
    Prop : Type
    Prop = Type

    Question : Type
    Question = [ A : Type  -- expected type of the answer (eg. Bool for yes/no question)
               ; Q : A -> Prop -- proposition which describes each answer.
               ]
                    -- eg.
                    -- [["Do you live in Paris?"]] =
                    --  (A = Bool
                    --  ;Q = \a -> if a then Live(Paris,x) else Not (Live(Paris,x)) )
                    -- (were x represents "you").
                    -- In particular, Q yes = Live(Paris,x)
                    -- [["Where do you live?"]] =
                    --  (A = City
                    --  ;Q = \a -> Live(a,x))

    Answer : Question -> Type
    Answer q = [ answer : q.A
               ; c      : q.Q answer ]
               -- Continuing the example. Assume
               --  a : Answer [["Do you live in Paris?"]]
               --  a : [ answer : Bool; c : if answer then Live(Paris,x) else Not (Live(Paris,x))]
               --  a = (answer = yes,
               --       c = ... a is a proof of Live(Paris,x))
               -- (so one cannot lie when answering
               --   or at worst the proof will point to the evidence for the lie.)
               --
               -- a : Answer [["Where do you live?"]]
               -- a : [ answer : City; c : Live(answer,x)]
               -- a = (answer = Paris; c ... (same proof as above))

in
\(params : [ Ind : Type
           ; String : Type
           ; City : Type
           ; paris : City
           ; london : City
           ; Time : Type
           ; tomorrow : Time
           ; Travel : [from : City; to : City; time : Time] -> Prop
           ; user0 : Ind
           ; agent : Ind
           ; greet : Ind -> Ind -> Type
	   ; sg    : (s:Ind) -> (a:Ind) -> greet s a
	   ; sg'   : greet agent user0
           ; ask : Ind -> Ind -> Question -> Prop
	   ; sask  : (s:Ind) -> (a:Ind) -> (q:Question) -> ask s a q
               -- a situation where s asks a question q
           ; hasName : (s:Ind) -> (name : String) -> Prop
           ; agentName : String
           ; sAgentName : hasName agent agentName
	   ; emptyMove : [ spkr    : Ind
	     	         ; addr    : Ind
			 ; content : [] ]
           ; ]) -> module


open import Lists
open import Kos params
open import Maybe
open import Booleans

open params

nonDescriptQuestion : Question
nonDescriptQuestion = (A = Prop, Q = \a -> a)

-- Answer nonDescriptQuestion = [answer : Prop; sit : answer]

-- interpretUtterance : Utterance -> Context -> [A : Type; c : Type]
-- resolution : Utterance -> (q : Question) -> Maybe (Answer q)
-- partialResolution : Utterance -> (q : Question) -> Maybe [q2 : Question ; c : Answer q2 -> Answer q]

PartialAnswer : (q : Question) -> Type
PartialAnswer q = [q2 : Question ; c : Answer q2 -> Answer q]

travelQuestion : Question
travelQuestion = (A = [from : City; to : City; time : Time]
                 ,Q = \a -> Travel a)

partialTravelQuestion : Question
partialTravelQuestion = (A = [from : City; time : Time]
                        ,Q = \a -> Travel (to = paris, from = a.from, time = a.time))

toParis : PartialAnswer travelQuestion
toParis = (q2 = partialTravelQuestion
          ,c = \a -> (answer = (to = paris, from = a.answer.from, time = a.answer.time)
                     ,c = a.c))

fromLondonTomorrow : Answer partialTravelQuestion
fromLondonTomorrow = (answer = (from = london, time = tomorrow)
                     ,c = _)


-- classifier : Utterance -> (q : Question) -> DisjointChoice
--   [A : Type; c : Type]                          -- not related to the question
--   [Answer q]                                    -- question fully resolved
--   [q2 : Question ; c : Answer q2 -> Answer q]   -- question partially resolved

PolQuestion : Type
PolQuestion = [ A : Type (= Bool); Q : Bool -> Prop]

WhQuestion : Type
WhQuestion  = [ A : Type (= Ind);  Q : Ind -> Prop]

nameQuestion : Question
nameQuestion = (A = String, Q = hasName agent)

askNameMove : [ spkr : Ind
              ; addr : Ind (= agent)
              ; content : [ q : Question (= nameQuestion)
                          ; c : ask spkr addr nameQuestion]]
askNameMove = (spkr = user0
              ,addr = agent
              ,content = (q = nameQuestion,
                          c = sask user0 agent nameQuestion))

GreetingMoveContent : Ind -> Ind -> Type
GreetingMoveContent spkr addr = [c : greet spkr addr]

greetingMove : [ spkr    : Ind ; addr : Ind (= agent) ; content : GreetingMoveContent spkr addr ]
greetingMove = (spkr = user0, addr = agent, content = (c = sg user0 agent))

integrateUserMove : (c : Type)
                -> [ spkr    : Ind ; addr : Ind ; content : c]
                -> InformationState
                -> InformationState /\ [ dgb : [ latestMove : [ spkr : Ind ; addr    : Ind ; content : c]]]
integrateUserMove _ m s = (private = s.private, dgb = (latestMove = m, moves = cons Move m s.dgb.moves))

greet' : InformationState -> InformationState/\ [ dgb : [ latestMove : [ spkr : Ind ; addr    : Ind ; content : [c : greet spkr addr]]]]
greet' = integrateUserMove (GreetingMoveContent user0 agent) greetingMove


tellNameMove : [ spkr : Ind
               ; addr : Ind (= user0)
               ; content : Answer nameQuestion]

tellNameMove = (spkr = agent
               ,addr = user0
               ,content = (answer = agentName, c = sAgentName))

AnswerRule : Question -> Type
AnswerRule question =
             (is : InformationState /\ [ dgb : [ latestMove : [ spkr    : Ind
                                                              ; addr    : Ind (= agent)
                                                              ; content : [q : Question (= question);
                                                                           c : ask spkr addr q]]]])
                   -> (InformationState /\
                       [ answer : [ spkr    : Ind
                                  ; addr    : Ind (= user0)
                                  ; content : Answer question]])

answerName : AnswerRule nameQuestion
answerName = \r -> (answer = tellNameMove
                   ,private = r.private
                   ,dgb = r.dgb )


Subtype : Type -> Type -> Type
Subtype A B = [conv : A -> B]

AnswerAnyRule : Type
AnswerAnyRule =
 (is : InformationState /\ [ dgb : [ qud : List Question ]]) ->
 (questionIndex : Index Question is.dgb.qud) ->
 (let question : Question
      question = lookup Question is.dgb.qud questionIndex
  in (answer : Answer question) ->
     (InformationState /\ [answer : Answer question]))

answerAnyRule : AnswerAnyRule
answerAnyRule is ix a =
              (private = is.private
              ,dgb = (qud = delete Question is.dgb.qud ix
                     ,latestMove = is.dgb.latestMove
                     ,moves = is.dgb.moves)
              ,answer = a)


ruleSet :
  [fulfilAgenda : InformationState /\ [ private : [ agenda : ReadyAgenda]] -> InformationState
  ;countergreeting : InformationState /\ [ dgb : [ latestMove : [ spkr    : Ind
                                                              ; addr    : Ind (= agent)
                                                              ; content : [c : greet spkr addr]]]]
                    -> (InformationState /\ [ private : [ agenda : ReadyAgenda ]])
  ;greeting' : InformationState  -> InformationState /\ [ dgb : [ latestMove : [ spkr    : Ind
                                                               ; addr    : Ind (= agent)
                                                               ; content : [c : greet spkr addr]]]]
  ;initialize : [] -> InformationState
  ]

ruleSet =
 (fulfilAgenda = \s -> ( private = (agenda = emptyAgenda)
                       , dgb     = (moves = cons Move (head Move s.private.agenda) s.dgb.moves
                                   , latestMove = (head Move s.private.agenda)))

 ,countergreeting = \r -> ( private = ( agenda = consAgenda ( spkr = agent
                                                        , addr = user0
                                                        , content = (c = sg'))
                                                        r.private.agenda)
                      , dgb = r.dgb )

 ,greeting' = \s -> ( private = s.private
                 , dgb     = ( moves  = s.dgb.moves
                             , latestMove = (spkr = user0, addr = agent,
                                            content = (c = sg user0 agent))))

 ,initialize = \ _ -> ( private = ( agenda = emptyAgenda)
                 , dgb     = ( moves  = emptyList Move
                             , latestMove = emptyMove)))

script : InformationState
script =
   answerName (
   integrateUserMove [ q : Question (= nameQuestion) ; c : ask user0 agent nameQuestion] askNameMove (
   ruleSet.fulfilAgenda (
   ruleSet.countergreeting (
   integrateUserMove (GreetingMoveContent user0 agent) greetingMove (
   ruleSet.initialize (
   ))))))
