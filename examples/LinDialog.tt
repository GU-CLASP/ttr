let Prop : Type
    Prop = Type

in \ (params : [ Ind : Type
           ; String : Type
           ; City : Type
           ; paris : City
           ; london : City
           ; Time : Type
           ; tomorrow : Time
           ; Travel : [from : City; to : City; time : Time] -> Prop
           ; Food : Type
           ; Drink : Type
           ; beer : Drink
           ; chips : Food
           ; Order : Food -> Drink -> Prop
           ; user0 : Ind
           ; agent : Ind
           ; greet : Ind -> Ind -> Type
           ; fresh : Ind -> Ind -> Type
	   ; sg    : (s:Ind) -> (a:Ind) -> greet s a
	   ; sg'   : greet agent user0
           ; hasName : (s:Ind) -> (name : String) -> Prop
           ; agentName : String
           ; sAgentName : hasName agent agentName]) ->
 (let open params
      InitialState : Type
      InitialState = [spkr : Ind; addr : Ind; p ::1 fresh spkr addr ]
      Rules : Type
      Rules = [greetRule : (x : Ind) -> (y : Ind) -> fresh x y -o greet x y ]
  in \ (initialState : InitialState) ->
     \ (rules : Rules) ->
   module

    st : InitialState
    st = initialState

    r : Rules
    r = rules
)
