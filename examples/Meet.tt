module


meetA : (A B : Type) -> (A /\ B) -> A
meetA A B p = p

meetAB : (A B : Type) -> (A /\ B) -> [fst : A; snd : B]
meetAB A B p = (fst = p, snd = p)

Plus : Type -> Type -> Type
Plus A B = {Inl A | Inr B}

joinAB : (A B : Type) -> Plus A B -> (A \/ B)
joinAB A B = split
               Inl x -> x
               Inr y -> y

joinA : (A B : Type) -> A -> A \/ B
joinA A B p = p


r1 : (A B : Type) -> A -> B -> [fst : A] /\ [snd : B]
r1 _ _ x y = (fst = x, snd = y)
