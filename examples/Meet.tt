module


selfSubtype : (A B : Type) -> (A /\ B) -> A /\ B
selfSubtype A B p = p

meetA : (A B : Type) -> (A /\ B) -> A
meetA A B p = p

meetAB : (A B : Type) -> (A /\ B) -> [fst : A; snd : B]
meetAB A B p = (fst = p, snd = p)

meetFun : (A B C D : Type) -> ((A -> B) /\ (C -> D)) -> (A /\ C) -> (B /\ D)
meetFun A B C D f x = f x

meetRec : (A B C D : Type) -> ([l : A] /\ (C -> D)) -> A
meetRec _ _ _ _ r = r.l

--       1 ⊑ A         B ⊑ 2
--     --------------------------- ⊑-→
--       (A -> B)  ⊑  1 -> 2
--   ----------------------------------------
--         (A -> B) /\ (C -> D) ⊑  1 -> 2


--  f : (A -> B) /\ (C -> D)           x : A ∧ B
-- ------------------------------     ------------
--   f : A -> B                         x : A                           ....
-- ---------------------------------------------               -----------------
--   f x : B                                                        f x : D
-- -----------------------------------------------------------------------------
--                     f x : B ∧ D


r1 : (A B : Type) -> A -> B -> [fst : A] /\ [snd : B]
r1 _ _ x y = (fst = x, snd = y)
