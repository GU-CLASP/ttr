module

open import Lists
open import Props

Real : Type
Real = primitive "#R"

plus : Real -> Real -> Real
plus x y = (primitive "+") x y

minus : Real -> Real -> Real
minus x y = (primitive "-") x y

subtract : Real -> Real -> Real
subtract x y = minus y x

times : Real -> Real -> Real
times x y = (primitive "*") x y

dotProd : List Real -> List Real -> Real
dotProd xs ys = foldr Real Real (zipWith Real Real Real times xs ys) plus 0.0

Positive : Real -> Type
Positive = primitive "#>=0"

decidePositivity : (x : Real) -> Dec (Positive x)
decidePositivity x = (primitive "positive?") x (Dec (Positive x)) (\z -> 'yes z) (\z -> 'no z)
