let
    open import Booleans
    open import Maybe
    open import Nats
in

module


-- Attention: recursive types MUST be defined with an *explicit*
-- split; this cannot factored out using, say, Maybe.
mutual
  List1 : Type -> Type
  List1 a = [head : a; tail : List a]

  List : Type -> Type
  List a = [ tag : Bool
           ; content : MaybeList a tag ]

  MaybeList : Type -> Bool -> Type
  MaybeList a = split
    'yes -> List1 a
    'no -> []

-- TODO: figure out why this crashes.
-- listLength : (A : Type) -> List A -> Nat
-- listLength A xs = xs

NonEmptyList : Type -> Type
NonEmptyList a = [ tag : True; content : List1 a ]

demoteList : (a : Type) -> NonEmptyList a -> List a
demoteList _ x = x

emptyList : (a : Type) -> List a
emptyList a = (tag = 'no, content = ())

cons : (a : Type) -> a -> List a -> NonEmptyList a
cons _ m a = (tag = true, content = (head = m, tail = a))

head : (a : Type) -> NonEmptyList a -> a
head _ l = l.content.head

tail : (a : Type) -> NonEmptyList a -> List a
tail _ l = l.content.tail

isNil : (a : Type) -> List a -> Bool
isNil a x = not x.tag

mutual
  Index : (A : Type) -> List A -> Type
  Index A xs = Index' A xs.tag xs.content 

  Index': (A : Type) -> (tag : Bool) -> (MaybeList A tag) -> Type
  Index' A = split
    'no -> \content -> {}
    'yes -> \content -> [tag : {'here | 'there}; content : Index A content.tail]

mutual
  delete : (A : Type) -> (xs : List A) -> Index A xs -> List A
  delete A xs = delete' A xs.tag xs.content

  delete' : (A : Type) -> (tag : Bool) -> (xs : MaybeList A tag) -> Index' A tag xs -> List A
  delete' A = split
    'no -> \xs ix -> ix -- because ix : {} and {} :< X for any type X.
    'yes -> \xs ix -> delete'' A xs ix.tag ix.content  -- xs : List1 A; ix : 

  delete'' : (A : Type) -> (xs : List1 A) -> (tag : {'here | 'there}) -> Index A xs.tail -> List A
  delete'' A xs = split
     'here -> \_ -> xs.tail
     'there -> \ix -> cons A xs.head (delete A xs.tail ix)

mutual
  lookup : (A : Type) -> (xs : List A) -> Index A xs -> A
  lookup A xs = lookup' A xs.tag xs.content

  lookup' : (A : Type) -> (tag : Bool) -> (xs : MaybeList A tag) -> Index' A tag xs -> A
  lookup' A = split
    'no -> \xs ix -> ix -- because ix : {} and {} :< X for any type X.
    'yes -> \xs ix -> lookup'' A xs ix.tag ix.content  -- xs : List1 A; ix : 

  lookup'' : (A : Type) -> (xs : List1 A) -> (tag : {'here | 'there}) -> Index A xs.tail -> A
  lookup'' A xs = split
     'here -> \_ -> xs.head
     'there -> \ix -> lookup A xs.tail ix

-- zipWith : (a b c : Type) -> (a -> b -> c) -> List a -> List b -> List c
-- zipWith a b c f = zip'
--   where
--     zip' : (aTag : Bool) -> List a -> List b -> List c
--     zip' = split
--       'no -> \_ -> 'nil ()
--       'cons x -> split
--         'nil _ -> 'nil ()
--         'cons y -> 'cons (head = f x.head y.head,
--                          tail = zip' x.tail y.tail)


foldr : (a b : Type) -> List a -> (a -> b -> b) -> b -> b
foldr a b xs f k = go (xs.tag) (xs.content)
  where go : (t : Bool) -> MaybeList a t -> b
        go = split
	   'no -> \_ -> k
           'yes -> \x -> f x.head (go x.tail.tag x.tail.content)
