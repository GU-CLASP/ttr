\(params : [Ind : Type;
            Animal Human Dog Donkey : Ind -> Type;
            Hug Owns : Ind -> Ind -> Type;
            a0 : Ind;
            aH : Human a0;
            aA : Animal a0
            ]) -> module

Sigma : (A : Type) -> (B : A -> Type) -> Type
Sigma A B = [fst : A ;
             snd : B fst]

first : (A : Type) -> (B : A -> Type) -> Sigma A B -> A
first A B r = r.fst

second : (A : Type) -> (B : A -> Type) -> (r : Sigma A B) -> B (r.fst)
second A B r = r.snd

second' : (A : Type) -> (B : A -> Type) -> (r : Sigma A B) -> B (first A B r)
second' A B r = r.snd

open params

PN : Type
PN = [x : Ind;
      cn : Ind -> Type;
      isCn : cn x]

Anim : Type
Anim = [x : Ind; isAnimal : Animal x]

Huma : Type
Huma = Anim /\ [x : Ind; isHuman : Human x]

a : Huma
a = (x = a0, isHuman = aH, isAnimal = aA)

b : Anim
b = a

ManOwnADonkey : Type
ManOwnADonkey = [x : Ind;
                 y : Ind;
                 p : Human x;
                 q : Donkey y;
                 o : Owns x y]

f : ManOwnADonkey -> Huma
f r = (x = x, isHuman = p, isAnimal = _)
  where open r


VP : Type
VP = Ind -> Type

NP' : Type
NP' = (verb : VP) -> [subject : Ind; holds : verb subject]

S : Type
S = [subject : Ind;
     verb : Ind -> Type;
     holds : verb subject]


-- appVP' : VP -> NP' -> S
-- appVP' vp np = (verb = vp, subject = s0.subject, holds = s0.holds)
